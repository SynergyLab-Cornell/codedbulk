#ifdef __TRAFFIC_SETUP__
#ifdef __TRAFFIC_GENERATION_UTILITIES__
#ifdef TOTAL_HOSTS
//TOTAL_NUM_TRAFFIC -> total number of generated traffic

// only generate the traffic when the traffic is not yet generated
if( traffic_manager->GetTrafficNotGenerated() ) {
  std::set<int> sources;
  std::set<int> non_sources;
// use external defined traffic at source
#ifndef MIXED_MULTICAST_SOURCE_INFO
  Ptr<CodedBulkTraffic> traffic_at_source[TOTAL_HOSTS];
#endif

#ifndef TOTAL_NUM_DESTINATIONS
  int total_num_destinations = 0;
#endif
  Ptr<UniformRandomVariable> unif_rv = CreateObject<UniformRandomVariable> ();
  Ptr<CodedBulkTraffic> traffic;

  // geberate TOTAL_NUM_TRAFFIC multicast flows
  sources = UniformlyGenerateNodesWithin (TOTAL_HOSTS, TOTAL_NUM_TRAFFIC);
  for(std::set<int>::iterator
    it_src  = sources.begin();
    it_src != sources.end();
    ++it_src
  ) {
    traffic = traffic_manager->addCodedBulkTraffic(map_host_to_sw[*it_src]);
    traffic->ApplyCodedBulk(false);
    traffic->SetUnicast(false);
    traffic->SetPriority(CodedBulkTraffic::Bulk);

    // 4 destinations
#ifndef TOTAL_NUM_DESTINATIONS
    total_num_destinations = 4;//unif_rv->GetValue(1,TOTAL_HOSTS-1);
#endif
    std::set<int> destinations = UniformlyGenerateNodesWithin (TOTAL_HOSTS, total_num_destinations, *it_src);
    for(std::set<int>::iterator
      it_dst  = destinations.begin();
      it_dst != destinations.end();
      ++it_dst
    ) {
      traffic->addDst(map_host_to_sw[*it_dst]);
    }
    traffic_at_source[*it_src] = traffic;
  }

  traffic_manager->SetTrafficNotGenerated(false);
}

#endif
#endif
#endif